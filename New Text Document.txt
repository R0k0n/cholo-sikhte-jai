pc(te);
        ll n;cin >> n;
        vector<ll>v(n);
        for(ll i = 0 ; i < n; i++)cin >> v[i];

        ll dp[100][100][2][2];

        for(ll i = 0 ; i < 100 ; i++){
            for(ll j = 0 ; j < 100 ; j++){
                for(ll k = 0 ; k < 2 ; k++){
                    for(ll l = 0 ; l < 2 ; l++){
                        if(k == 1)dp[i][j][k][l] = -1e10;
                        if(k == 0)dp[i][j][k][l] = 1e10;
                    }
                }
            }
        }
        dp[0][n-1][0][0] = 0;
        for(ll i = 0 ;i < n ; i++){
            for(ll j = n-1 ; j >= i ; j--){
                //if(i == j)break;
                for(ll k = 0 ; k < 2 ; k++){
                    for(ll l = 0 ; l < 2 ; l++){
                        if(dp[i][j][k][l] != 1e10){
                            if(dp[i][j][k][l] == -1e10)continue;
                            cout << i << " " << j << " " << k << " " << l << " " << dp[i][j][k][l] << endl;
                            if(!k){
                                dp[i+1][j][!k][1] = max(dp[i+1][j][!k][1] , dp[i][j][k][l] + v[i]);
                                dp[i][j-1][!k][0] = max(dp[i][j-1][!k][0] , dp[i][j][k][l] + v[j]);

                            }
                            else{
                                if(j - i + 1 != n)dp[i+1][j][!k][1] = min(dp[i+1][j][!k][1] , dp[i][j][k][l] - v[i]);
                                if(j - i + 1 != n)dp[i][j-1][!k][0] = min(dp[i+1][j][!k][0] , dp[i][j][k][l] - v[j]);

                            }
                            if(k){
                                //max
                                if(l){
                                    dp[i+1][j][k][l] = max(dp[i+1][j][k][l] , dp[i][j][k][l] + v[i]);
                                }
                                else{
                                    dp[i][j-1][k][l] = max(dp[i][j-1][k][l] , dp[i][j][k][l] + v[j]);
                                }
                            }
                            else{

                                if(l){
                                    if(j - i + 1 != n)dp[i+1][j][k][l] = min(dp[i+1][j][k][l] , dp[i][j][k][l] - v[i]);
                                }
                                else{
                                    if(j - i + 1 != n)dp[i][j-1][k][l] = min(dp[i][j-1][k][l] , dp[i][j][k][l] - v[j]);
                                }

                            }

                        }
                    }
                }
            }
        }
        ll ans = -1e10;
        for(ll i = 0 ; i < n ; i++){
            for(ll j = 0 ; j < 2 ; j++){
                for(ll k  = 0 ; k < 2 ; k++){
                    if(dp[i][i][j][k] != 1e10){
                        ll ea = 0;
                        if(j){
                            ea = dp[i][i][j][k] + abs(v[i]);
                        }
                        else{
                            ea = dp[i][i][j][k] - abs(v[i]);
                        }
                        ans = max(ans , ea);
                    }
                }
            }
        }
        cout << ans << endl;